import type { BUILDTARGET, NEUKIT_CONFIG, paths } from "../../types";
import fs from 'fs/promises';
import path from 'path';
import * as c from '8colors';
import ora from 'ora';
import png2icons from 'png2icons';

const generateNsisScript = (
    config: NEUKIT_CONFIG,
    arch: string,
    appSourceDir: string,
    outInstallerFile: string,
    iconPath: string
): string => {
    const { version, applicationId } = config;
    const { appName } = config.buildScript!.win!;
    const companyName = config.companyName! || 'NO_COMPANY_SET'
    const exeName = `${appName}.exe`;

    return `
; Generated by NeuKit
!include "MUI2.nsh"

#--------------------------------
# General
#--------------------------------
Name "${appName}"
OutFile "${outInstallerFile}"
InstallDir "$PROGRAMFILES\\${companyName}\\${appName}"
InstallDirRegKey HKCU "Software\\${companyName}\\${appName}" ""
Icon "${iconPath}"
UninstallIcon "${iconPath}"

#--------------------------------
# Interface Settings
#--------------------------------
!define MUI_ABORTWARNING
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH

!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES

!insertmacro MUI_LANGUAGE "English"

#--------------------------------
# Installer Section
#--------------------------------
Section "Install"
    SetOutPath "$INSTDIR"

    ; Add all application files recursively
    File /r "${appSourceDir}\\*.*"

    ; Store installation folder
    WriteRegStr HKCU "Software\\${companyName}\\${appName}" "" $INSTDIR

    ; Create shortcuts
    CreateShortCut "$DESKTOP\\${appName}.lnk" "$INSTDIR\\${exeName}"
    CreateShortCut "$SMPROGRAMS\\${appName}.lnk" "$INSTDIR\\${exeName}"

    ; Create uninstaller
    WriteUninstaller "$INSTDIR\\uninstall.exe"
SectionEnd

#--------------------------------
# Uninstaller Section
#--------------------------------
Section "Uninstall"
    ; Remove files and directories
    Delete "$INSTDIR\\${exeName}"
    Delete "$INSTDIR\\resources.neu"
    Delete "$INSTDIR\\uninstall.exe"
    Delete "$INSTDIR\\icon.ico"
    RMDir /r "$INSTDIR\\extensions" 
    RMDir "$INSTDIR"

    ; Remove shortcuts
    Delete "$DESKTOP\\${appName}.lnk"
    Delete "$SMPROGRAMS\\${appName}.lnk"

    ; Remove registry keys
    DeleteRegKey /ifempty HKCU "Software\\${companyName}\\${appName}"
SectionEnd
    `;
};


export const buildWindows = async (config: NEUKIT_CONFIG, paths: paths, target: BUILDTARGET, verbose: boolean) => {
    const os = process.platform;
    const { wd } = paths;
    const outDir = path.join(wd, 'build', target);

    console.log(c.green(`Starting NSIS installer build for Windows | App version ${config.version}`));

    if (!config.buildScript?.win) {
        throw new Error('Missing buildScript entry for Windows in config.');
    }

    const spinner = ora(`üõ†Ô∏è  Running 'neu build' command...`).start();

    await fs.rm(path.join(wd, 'dist'), { recursive: true, force: true });
    await fs.rm(outDir, { recursive: true, force: true });
    await fs.mkdir(outDir, { recursive: true });

    const build = Bun.spawn(['neu', 'build']);
    await build.exited;

    verbose && console.log(await new Response(build.stdout).text());
    spinner.succeed("'neu build' process finished.");
    spinner.start('Creating Windows Installers with NSIS...');

    for (const arch of config.buildScript.win.architecture) {
        spinner.info(`Generating installer for architecture: ${arch}`);
        const { binaryName } = config.cli;
        const distDir = path.join(wd, 'dist', binaryName);


        try {
            //clean Unwanted files

            spinner.info(`Cleaning up files in ${distDir} for ${arch}...`);
            const itemsInDistDir = await fs.readdir(distDir);
            const executableToKeep = `${binaryName}-${target}_${arch}.exe`; // This will be renamed later
            const filesAndDirsToKeep = new Set([
                executableToKeep,
                'resources.neu',
                'extensions' // The 'extensions' directory itself
            ]);

            for (const item of itemsInDistDir) {
                if (!filesAndDirsToKeep.has(item)) {
                    const itemPath = path.join(distDir, item);
                    await fs.rm(itemPath, { recursive: true, force: true });
                    verbose && console.log(c.white(`  Removed: ${itemPath}`));
                }
            }

            const extensionsBasePath = path.join(distDir, 'extensions');
            try {
                if (await fs.exists(extensionsBasePath)) {
                    const extensionDirs = await fs.readdir(extensionsBasePath);
                    for (const extDir of extensionDirs) {
                        const extDirPath = path.join(extensionsBasePath, extDir);
                        const stats = await fs.stat(extDirPath);
                        if (stats.isDirectory()) {
                            const startFilePath = path.join(extDirPath, 'start');
                            if (await fs.exists(startFilePath)) {
                                await fs.rm(startFilePath);
                                verbose && console.log(c.white(`  Removed: ${startFilePath}`));
                            }
                        }
                    }
                }
            } catch (e: any) { }


            const iconSourcePath = path.join(wd, 'assets', 'icon.png');
            const iconOutputPath = path.join(distDir, 'icon.ico');
            const input = await fs.readFile(iconSourcePath);
            const ico = png2icons.createICO(input, png2icons.BEZIER, 20, true, true);
            if (ico) await fs.writeFile(iconOutputPath, ico);

            const originalExePath = path.join(distDir, `${binaryName}-${target}_${arch}.exe`);
            const finalExePath = path.join(distDir, `${config.buildScript.win.appName}.exe`);



            await fs.rename(originalExePath, finalExePath);

            const installerName = `${config.buildScript.win.appName}-v${config.version}-${arch}-setup.exe`;
            const installerOutputPath = path.join(outDir, installerName);
            const nsiScript = generateNsisScript(config, arch, distDir, installerOutputPath, iconOutputPath);
            const nsiScriptPath = path.join(outDir, `temp_${arch}.nsi`);
            await fs.writeFile(nsiScriptPath, nsiScript);


            try {
                const nsisProc = Bun.spawn(['makensis', nsiScriptPath]);
                const exitCode = await nsisProc.exited;

                if (exitCode !== 0) {
                    throw new Error(`NSIS compilation failed for ${arch} with exit code ${exitCode}.`);
                }

            } catch (error: any) {
                if (error.code === 'ENOENT') {
                    spinner.fail("NSIS Compiler Not Found");
                    console.error(c.red(`\nError: 'makensis' command not found in your system's PATH.`));
                    console.error(c.yellow("To fix this, please install NSIS using the command for your operating system:\n"));

                    switch (os) {
                        case 'darwin':
                            console.log(c.green("On macOS (using Homebrew):"));
                            console.log(c.cyan("  brew install nsis"));
                            console.log(c.yellow("\n  If you don't have Homebrew, install it from https://brew.sh"));
                            break;

                        case 'win32':
                            console.log(c.green("On Windows:"));
                            console.log("  1. Download the installer from the official NSIS website:");
                            console.log(c.cyan("     https://nsis.sourceforge.io/Download"));
                            console.log(c.green("\n  2. During installation, MAKE SURE to check the box that adds NSIS to your system's PATH."));
                            console.log(c.yellow("\n  After installing, you may need to restart your terminal or command prompt."));
                            break;

                        case 'linux':
                            console.log(c.green("On Linux:"));
                            console.log("  For Debian, Ubuntu, or Mint:");
                            console.log(c.cyan("    sudo apt-get update && sudo apt-get install nsis"));
                            console.log("\n  For Fedora, CentOS, or RHEL:");
                            console.log(c.cyan("    sudo dnf install nsis"));
                            break;

                        default:
                            console.log(c.green(`On ${os}:`));
                            console.log("  Please visit the NSIS download page and follow the instructions for your OS:");
                            console.log(c.cyan("    https://nsis.sourceforge.io/Download"));
                            break;
                    }
                    // Exit the function gracefully instead of crashing
                    return;
                }

                // For any other unexpected errors, re-throw them
                spinner.fail(`An unexpected error occurred during NSIS compilation for ${arch}`);
                throw error;
            }

            // 5. Cleanup temporary script
            await fs.rm(nsiScriptPath);

            spinner.succeed(`üì¶ NSIS Installer for ${arch} created at ${c.yellow(installerOutputPath)}`);

        } catch (error: any) {
            spinner.fail(`Failed to create installer for architecture: ${arch}`);
            console.error(c.red(error.message));
            return;
        }
    }
};